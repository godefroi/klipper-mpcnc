[include mainsail.cfg]
[virtual_sdcard]
path: /home/mark/printer_data/gcodes
on_error_gcode: CANCEL_PRINT

[stepper_x]
step_pin: PF0
dir_pin: PF1
enable_pin: !PD7
microsteps: 16
rotation_distance: 32
endstop_pin: ^PE5  # X_MIN
position_endstop: 0
position_max: 500
homing_speed: 5

[stepper_x1]
step_pin: PA4
dir_pin: PA6
enable_pin: !PA2
microsteps: 16
rotation_distance: 32
endstop_pin: ^PE4  # X_MAX

[stepper_y]
step_pin: PF6
dir_pin: !PF7
enable_pin: !PF2
microsteps: 16
rotation_distance: 32
endstop_pin: ^PJ1  # Y_MIN
position_endstop: 0
position_max: 500
homing_speed: 5

[stepper_y1]
step_pin: PC1
dir_pin: PC3
enable_pin: !PC7
microsteps: 16
rotation_distance: 32
endstop_pin: ^PJ0  # Y_MAX

[stepper_z]
step_pin: PL3
dir_pin: PL1
enable_pin: !PK0
microsteps: 16
rotation_distance: 8
endstop_pin: PD3 # should be ^ but we have it inverted because there *is* no endstop currently...
##endstop_pin: ^PD2 # Z_MAX
position_endstop: 0
position_max: 200

#[extruder]
#step_pin: PC1
#dir_pin: PC3
#enable_pin: !PC7
#microsteps: 16
#rotation_distance: 33.500
#nozzle_diameter: 0.400
#filament_diameter: 1.750
#heater_pin: PB4
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PK5
#control: pid
#pid_Kp: 22.2
#pid_Ki: 1.08
#pid_Kd: 114
#min_temp: 0
#max_temp: 250

#[heater_bed]
#heater_pin: PH5
#sensor_type: EPCOS 100K B57560G104F
#sensor_pin: PK6
#control: watermark
#min_temp: 0
#max_temp: 130

#[fan]
#pin: PH6

[mcu]
serial: /dev/serial/by-id/usb-Arduino__www.arduino.cc__0042_7583033343935190A102-if00

[printer]
kinematics: cartesian
max_velocity: 50
max_accel: 180
max_z_velocity: 15
max_z_accel: 80


[homing_override]
axes: z
set_position_z: 0
gcode:
	{% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
	{% if home_all or 'X' in params %} G28 X {% endif %}
	{% if home_all or 'Y' in params %} G28 Y {% endif %}


[gcode_macro SET_CURRENT_ORIGIN]
description: Set the G-Code offset to the current location
gcode:
	G92


[gcode_macro RETURN_TO_ORIGIN]
description: Move the toolhead to the current G-Code origin
gcode:
	G0 Z0     ; first, move Z to zero
	G0 X0 Y0  ; then, move X and Y to zero


[gcode_macro ENABLE_Z_AXIS]
description: Enables movements on the Z axis
variable_enable_z: 0    # Z AXIS STARTS AS DISABLED!
gcode:
	SET_GCODE_VARIABLE MACRO=ENABLE_Z_AXIS VARIABLE=enable_z VALUE=1
	RESPOND TYPE=error MSG='Z AXIS has been ENABLED.'


[gcode_macro DISABLE_Z_AXIS]
description: Disables movements on the Z axis
gcode:
	SET_GCODE_VARIABLE MACRO=ENABLE_Z_AXIS VARIABLE=enable_z VALUE=0
	RESPOND TYPE=error MSG='Z AXIS has been DISABLED.'	


[gcode_macro G0]
description: Move the toolhead (rapid)
rename_existing: G0.1
gcode:
	{% if printer['gcode_macro ENABLE_Z_AXIS'].enable_z and 'Z' in params %}
		{% if 'F' in params %}
			{% if 'X' in params and 'Y' in params %}
				G0.1 X{params.X} Y{params.Y} Z{params.Z} F{params.F}
			{% elif 'X' in params %}
				G0.1 X{params.X} Z{params.Z} F{params.F}
			{% elif 'Y' in params %}
				G0.1 Y{params.Y} Z{params.Z} F{params.F}
			{% endif %}
		{% else %}
			{% if 'X' in params and 'Y' in params %}
				G0.1 X{params.X} Y{params.Y} Z{params.Z}
			{% elif 'X' in params %}
				G0.1 X{params.X} Z{params.Z}
			{% elif 'Y' in params %}
				G0.1 Y{params.Y} Z{params.Z}
			{% endif %}
		{% endif %}
	{% else %}
		{% if 'F' in params %}
			{% if 'X' in params and 'Y' in params %}
				G0.1 X{params.X} Y{params.Y} F{params.F}
			{% elif 'X' in params %}
				G0.1 X{params.X} F{params.F}
			{% elif 'Y' in params %}
				G0.1 Y{params.Y} F{params.F}
			{% endif %}
		{% else %}
			{% if 'X' in params and 'Y' in params %}
				G0.1 X{params.X} Y{params.Y}
			{% elif 'X' in params %}
				G0.1 X{params.X}
			{% elif 'Y' in params %}
				G0.1 Y{params.Y}
			{% endif %}
		{% endif %}
	{% endif %}


[gcode_macro G1]
description: Move the toolhead (linear)
rename_existing: G1.1
gcode:
	;RESPOND MSG='running G1 macro: enable_z={printer['gcode_macro ENABLE_Z_AXIS'].enable_z}'
	{% if printer['gcode_macro ENABLE_Z_AXIS'].enable_z and 'Z' in params %}
		{% if 'F' in params %}
			{% if 'X' in params and 'Y' in params %}
				G1.1 X{params.X} Y{params.Y} Z{params.Z} F{params.F}
			{% elif 'X' in params %}
				G1.1 X{params.X} Z{params.Z} F{params.F}
			{% elif 'Y' in params %}
				G1.1 Y{params.Y} Z{params.Z} F{params.F}
			{% endif %}
		{% else %}
			{% if 'X' in params and 'Y' in params %}
				G1.1 X{params.X} Y{params.Y} Z{params.Z}
			{% elif 'X' in params %}
				G1.1 X{params.X} Z{params.Z}
			{% elif 'Y' in params %}
				G1.1 Y{params.Y} Z{params.Z}
			{% endif %}
		{% endif %}
	{% else %}
		{% if 'F' in params %}
			{% if 'X' in params and 'Y' in params %}
				G1.1 X{params.X} Y{params.Y} F{params.F}
			{% elif 'X' in params %}
				G1.1 X{params.X} F{params.F}
			{% elif 'Y' in params %}
				G1.1 Y{params.Y} F{params.F}
			{% endif %}
		{% else %}
			{% if 'X' in params and 'Y' in params %}
				G1.1 X{params.X} Y{params.Y}
			{% elif 'X' in params %}
				G1.1 X{params.X}
			{% elif 'Y' in params %}
				G1.1 Y{params.Y}
			{% endif %}
		{% endif %}
	{% endif %}




#[output_pin TOOL]
#pin: !PG5               # D11=PB5, D6=PH3, D5=PE3, D4=PG5 (from closest to reset to farthest, pins are GND,5V,SIG from edge inwards)
#pwm: True
#hardware_pwm: True
#cycle_time: 0.005
#value: 0                # value to set on startup
#shutdown_value: 0       # value to set on shutdown
#maximum_mcu_duration: 5 # how long the host has to acknowledge a set_pin
#scale: 255

#[servo TOOL]
#pin: !PG5


[output_pin TOOL_POWER]
pin: PB4


[gcode_macro TOOL_ON]
description: Enables power to the tool
gcode:
	SET_PIN PIN=TOOL_POWER VALUE=1


[gcode_macro TOOL_OFF]
description: Disables power to the tool
gcode:
	SET_PIN PIN=TOOL_POWER VALUE=0


[gcode_macro _STARTUP_TOOL_THIS_DOES_NOT_WORK]
description: Enable power to the tool, and start the cutter at a specified RPM
gcode:
	; could do something fancy like if printer['output_pin tool'].value for checking whether to
	; power up and wait, or just skip to the speed set
	TOOL_ON    ; enable power to the tool
	G4         ; wait for the ESC to boot and be ready
	;SET_PIN PIN=TOOL VALUE=128 ; or whatever speed, 0-255
	;SET_SERVO SERVO=TOOL ANGLE=90 ; or whatever "angle", where angles go from 0 to ... something
	

# M3 is "spindle speed CW" and value is 0-255
[gcode_macro M3]
description: Start the cutter (clockwise); values are in the range 0-255
gcode:
	{% set S = params.S|default(0)|int %}
	SET_PIN PIN=TOOL VALUE=S

# M4 is "spindle speed CCW" and value is 0-255
[gcode_macro M4]
description: Start the cutter (counter-clockwise); values are in the range 0-255gcode:
gcode:
	{% set S = params.S|default(0.0)|float %}
	SET_PIN PIN=TOOL VALUE=S

# M5 is "spindle stop"
[gcode_macro M5]
description: Stop the cutter
gcode:
	SET_PIN PIN=TOOL VALUE=0


# Common EXP1 / EXP2 (display) pins
[board_pins]
aliases:
    # Common EXP1 header found on many "all-in-one" ramps clones
    EXP1_1=PC0, EXP1_3=PH0, EXP1_5=PA1, EXP1_7=PA5, EXP1_9=<GND>,
    EXP1_2=PC2, EXP1_4=PH1, EXP1_6=PA3, EXP1_8=PA7, EXP1_10=<5V>,
    # EXP2 header
    EXP2_1=PB3, EXP2_3=PC6, EXP2_5=PC4, EXP2_7=PL0, EXP2_9=<GND>,
    EXP2_2=PB1, EXP2_4=PB0, EXP2_6=PB2, EXP2_8=PG0, EXP2_10=<RST>
    # Pins EXP2_1, EXP2_6, EXP2_2 are also MISO, MOSI, SCK of bus "spi"
    # Note, some boards wire: EXP2_8=<RST>, EXP2_10=PG0

# See the sample-lcd.cfg file for definitions of common LCD displays.


#[gcode_arcs]
# the default resolution of 1.0 mm is surely sufficient for a foam cutter...
#resolution: 1.0


# enable M118/RESPOND output
[respond]
default_type: echo


[display]
lcd_type: hd44780
rs_pin: EXP1_4
e_pin: EXP1_3
d4_pin: EXP1_5
d5_pin: EXP1_6
d6_pin: EXP1_7
d7_pin: EXP1_8
encoder_pins: ^EXP2_3, ^EXP2_5
click_pin: ^!EXP1_2
#kill_pin: ^!EXP2_8


[output_pin beeper]
pin: EXP1_1


[menu __main __octoprint]
type: disabled

[menu __main __sdcard]
type: disabled

[menu __main __temp]
type: disabled

[menu __main __filament]
type: disabled

[menu __main __setup]
type: disabled

[display_data _default_20x4 extruder]
position: 0, 0
text: { "X:%-5.2f" % (printer.toolhead.position.x) }

[display_data _default_20x4 heater_bed]
position: 0, 10
text: { "Y:%-5.2f" % (printer.toolhead.position.y) }

[display_data _default_20x4 extruder1]
position: 1, 0
text: { "Z:%-5.2f" % (printer.toolhead.position.z) }
